# -*- coding: utf-8 -*-
"""EPQ

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ko-LaUM3Ih48xVvVvrYOh8f2yyDFk4yq
"""

from google.colab import drive 
drive.mount('/content/gdrive')

!unzip /content/gdrive/MyDrive/EPQ/EPQDataset/CMFD.zip -d /content/Correctly-Masked

!unzip /content/gdrive/MyDrive/EPQ/EPQDataset/IMFD.zip -d /content/Incorrectly-Masked

import numpy as np 
from PIL import Image
import os as os 
import random as random
import tensorflow as tf 
from keras import models, datasets, layers
from keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot
from tensorflow.keras.applications import MobileNetV2
from keras.layers import Dense, Activation, Flatten, AveragePooling2D, Dropout
from keras.models import Model

d = ["/content/Incorrectly-Masked", "/content/Correctly-Masked"]
trainGenerator = ImageDataGenerator(zoom_range = [0.8, 2], brightness_range=[0.5,1.2])
def createBatch(fileNum):
  dataSet = []
  labels = []
  directories = [os.path.join(d[0], os.listdir(d[0])[fileNum]), os.path.join(d[1], os.listdir(d[1])[fileNum])]
  print(directories)
  lab = 0
  for dir in directories:
    print(dir)
    for image in os.listdir(dir):
        img = formatImage(os.path.join(dir, image))
        dataSet.append(img)
        labels.append(lab)
        
    lab = 1
  
  return trainGenerator.flow(np.array(dataSet), np.array(labels))
   


def formatImage(path):
  img = Image.open(path).resize((224, 224))
  return np.array(img)

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(2))

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

def getSamplesFromDataGen(resultData):
    x = resultData.next() #fetch the first batch
    a = x[0] # train data
    b = x[1] # train label
    for i in range(0,20):
        pyplot.imshow(a[i]/255)
        pyplot.title(b[i])
        pyplot.show()

for i in range(1, 8):
  
  hist = model.fit(createBatch(i), epochs = 10, batch_size = 32)
  pyplot.plot(hist.history['accuracy'])
  pyplot.title('model accuracy')
  pyplot.ylabel('accuracy')
  pyplot.xlabel('epoch')
  pyplot.legend(['train', 'validation'], loc='upper left')
  pyplot.show()

data, labels = createBatch(34)

h = model.evaluate(data, labels, verbose = 2)
pyplot.plot(h.history['accuracy'])
pyplot.title('model accuracy')
pyplot.ylabel('accuracy')
pyplot.xlabel('epoch')
pyplot.legend(['train', 'validation'], loc='upper left')
pyplot.show()
